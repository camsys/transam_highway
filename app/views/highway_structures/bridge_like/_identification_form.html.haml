:ruby
  city_names = District.joins(:district_type).where(district_types: {name: 'Place'}).pluck(:name)
  county_names = District.joins(:district_type).where(district_types: {name: 'County'}).pluck(:name)
:css
  .profile-location-remarks .editable-inline, .profile-location-description .editable-inline {
    width: 50%;
  }
= editable_asset_association_tag(asset, :state, reference_label('highway_structures', 'state', '* State'), ISO3166::Country['US'].states.keys.map{|k| [k, k]}, suffix: '')
= editable_asset_association_tag(asset, :region, reference_label('highway_structures', 'region_id', 'Region'))
= editable_asset_association_tag(asset, :maintenance_section, reference_label('highway_structures', 'maintenance_section_id', 'Maintenance Section'))
.profile-county
  = editable_asset_field_tag(asset, :county, reference_label('highway_structures', 'county', 'County'))
.profile-city
  = editable_asset_field_tag(asset, :city, reference_label('highway_structures', 'city', '* City'))
= editable_asset_field_tag(asset, :features_intersected, reference_label('highway_structures', 'features_intersected', 'Feature Intersected'), required: false)
= editable_asset_field_tag(asset, :facility_carried, reference_label('highway_structures', 'facility_carried', 'Facility Carried'), required: false) unless @sshml
= editable_asset_field_tag(asset, :structure_number, reference_label('highway_structures', 'structure_number', 'Structure Number'), required: false)
= editable_asset_field_tag(asset, :asset_tag, reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key'))
/= editable_asset_field_tag(asset, :structure_alias, reference_label('highway_structures', 'structure_alias', 'Structure Alias'), required: false)
.profile-location-description
  = editable_asset_field_tag(asset, :location_description, reference_label('highway_structures', 'location_description', 'Location Description'), required: false)
= editable_asset_field_tag(asset, :milepoint, reference_label('highway_structures', 'milepoint', 'Milepoint'), required: false)
.form-group
  %label.control-label
    = reference_label('highway_structures', 'transam_assets.geometry.y', 'Latitude')
  .display-value
    = asset.geometry.try(:y)
.form-group
  %label.control-label
    = reference_label('highway_structures', 'transam_assets.geometry.x', 'Longitude')
  .display-value
    = asset.geometry.try(:x)
- unless @sshml
  .row
    .col-sm-2
      = editable_asset_association_tag(asset, :border_bridge_state, reference_label('bridges', 'border_bridge_state', 'State (border)'), [['KS', 'KS'], ['NE', 'NE'], ['NM', 'NM'], ['OK', 'OK'], ['UT', 'UT'], ['WY', 'WY']], suffix: '')
    .col-sm-3
      = editable_asset_field_tag(asset, :border_bridge_pcnt_responsibility, reference_label('bridges', 'border_bridge_pcnt_responsibility', '% Resp. (border)'), required: false)
    .col-sm-3
      = editable_asset_field_tag(asset, :border_bridge_structure_number, reference_label('bridges', 'border_bridge_structure_number', 'Structure Number (border)'), required: false)
.profile-location-remarks
  = editable_asset_field_tag(asset, :remarks, type: 'textarea', required: false)


:javascript
  $(function() {
    function isCountyInvalid(newCounty) {
      return newCounty && #{county_names.to_json.html_safe || []}.indexOf(newCounty) < 0; 
    }

    function isCityInvalid(newCity) {
      return newCity && #{city_names.to_json.html_safe || []}.indexOf(newCity) < 0; 
    }

    $('.profile-city .editable-field').on('shown', function(e, editable) {
      $('#city_group input').typeahead({
        items: 10,
        source: #{city_names.to_json.html_safe || []}
      });
    });

    $('.profile-county .editable-field').on('shown', function(e, editable) {
      $('#county_group input').typeahead({
        items: 10,
        source: #{county_names.to_json.html_safe || []}
      });
    });

    var old_city = "#{asset.city}";
    var old_county = "#{asset.county}";
    // validate against district entries
    // restore original value if not match
    $('.save-xeditable-button').click(function() {
      var newCity = $('.profile-city input').val();
      if(isCityInvalid(newCity)) {
        $('.profile-city .editable-field').editable('setValue', old_city);
      }

      var newCounty = $('.profile-county input').val();
      if(isCountyInvalid(newCounty)) {
        $('.profile-county .editable-field').editable('setValue', old_county);
      }
    });

  });

    