:ruby
  table_dom_id = SecureRandom.hex
- unless @asset || @inspection
  .col-md-9
    #maintenance_service_orders_table_actions.row
      = form_tag maintenance_service_orders_path, :id => 'filter_form', :method => "get", :class => 'navbar-form navbar-left' do
        #filter-div
          %label Priority
          .form-group
            = select_tag(:priority_type_id, options_for_select(MaintenancePriorityType.active.map{|t| [t.name, t.id]}, :selected => @priority_types), :class => "form-control", :multiple => true)

          %label Status
          .form-group
            = select_tag(:state, options_for_select(MaintenanceServiceOrder.state_names.map{|s| [MaintenanceServiceOrder.human_state_name(s) == MaintenanceServiceOrder.human_state_name(s).downcase ? MaintenanceServiceOrder.human_state_name(s).titleize : MaintenanceServiceOrder.human_state_name(s), s]}, :selected => @states), :class => "form-control", :multiple => true)

          %label Date First Recommended
          .form-group
            = date_field_tag(:date_recommended, @date_recommended)

          %label Timeline
          .form-group
            = date_field_tag(:due_month, @due_month)

          %label= reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key')
          .form-group
            = text_field_tag(:asset_search_text, @asset_search_text)

          .form-group
            = button_tag :class => 'btn btn-default pull-right filter', :type => 'submit' do
              %i.fa.fa-filter

%table.table.table-hover{:id => table_dom_id,
    :data => {:toggle => 'table',
    :url => @asset.present? ? maintenance_service_orders_path(:asset_id => @asset.try(:transam_asset).try(:id) || @asset.id, :format => :json) : maintenance_service_orders_path(:format => :json),
    :card_view => "false",
    :pagination => 'true',
    :sort_order => 'asc',
    :sortable => 'true',
    :side_pagination => 'server',
    :show_pagination_switch => 'true',
    :page_number => '1',
    :page_list => "[5, 10, 20, 50, 100, 200]",
    :page_size => current_user.num_table_rows,
    :search => 'false',
    :show_columns => 'true',
    :row_style => 'row_style',
    :click_to_select => 'true',
    :query_params => "query_params",
    :show_export => 'true',
    :id_field => 'object_key',
    :export_types => "['csv', 'txt', 'excel']",
    :state_save => 'true',
    :state_save_id_table => "work_orders_id",
    :state_save_expire => "1y",
    :single_select => 'true'}}

  %thead
    %tr
      %th.center.nowrap{:data => {:field => "object_key", :align => 'left', :visible => 'false'}} Object Key
      %th.center{:data => {:field => "priority_type", :align => 'left', :sortable => 'false'}} Priority
      %th.center{:data => {:field => "state", :align => 'left', :sortable => 'false', :formatter => 'status_formatter'}} Status
      %th.center{:data => {:field => "maintenance_activity_category_subtype", :align => 'left', :sortable => 'false'}} General Location
      %th.center{:data => {:field => "maintenance_activity_type", :align => 'left', :sortable => 'false'}} Recommendation
      %th.center{:data => {:field => "notes", :align => 'left', :sortable => 'true'}} Inspection Notes
      %th.center{:data => {:field => "date_recommended", :align => 'right', :formatter => 'date_formatter', :sortable => 'true'}} Date First Recommended
      %th.center{:data => {:field => "due_month", :align => 'left', :sortable => 'false'}} Timeline
      %th.center{:data => {:field => "completed_date", :align => 'right', :formatter => 'date_formatter', :sortable => 'false'}} Date Completed
      - unless @asset
        %th.center{:data => {:field => "transam_asset", :align => 'left', :formatter => 'asset_link_formatter', :sortable => 'true'}}= reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key')
      - if @asset || @inspection
        %th.center.nowrap{:data => {:field => "dummy1", :align => 'left', :formatter => 'link_formatter'}} Actions

= render 'shared/table_formatters'

:javascript

  var path = '#{maintenance_service_order_path("x")}';

  $(document).ready(function() {

    $('#priority_type_id').multiselect({
      inheritClass: true,
      maxHeight: 250,
      buttonText: function(options, select) {
        if (options.length === 0) {
          return 'Priority types...';
        } else {
          return 'Priority types - ' + options.length + ' selected';
        }
      }
    });

    $('#state').multiselect({
      inheritClass: true,
      maxHeight: 250,
      buttonText: function(options, select) {
        if (options.length === 0) {
          return 'Statuses...';
        } else {
          return 'Statuses - ' + options.length + ' selected';
        }
      }
    });
  });

  $(window).resize(function() {
    $("##{table_dom_id}").bootstrapTable('resetView');
  });

  // table formatters
  function asset_link_formatter(value, data) {
    return "<a href='/inventory/" + data['transam_asset_object_key'] + "'>" + value + "</a>"
  };

  function status_formatter(value, row) {
    d = new Date()
    d.setMonth(d.getMonth()-1)
    if ((moment(d) > moment(row['due_date'])) && (row['state'] != 'completed')) {
      return 'Overdue'
    } else {
      return value.charAt(0).toUpperCase() + value.slice(1)
    }

  }

  function erf_formatter(value, row) {
    if (value.includes('ERF')) {
      return $.trim(value.split('-')[1]);
    }
  }

  var priority_types = #{@priority_types || []};
  var states = #{raw @states.blank? ? [] : raw(@states)};
  var date_recommended = '#{@date_recommended}';
  var due_month = '#{@due_month}';
  var asset_search_text = '#{@asset_search_text}';

  function query_params(params) {
    if(priority_types.length > 0) {
      params.priority_type_id = priority_types;
    }
    if(states.length > 0) {
      params.state = states;
    }
    if(date_recommended) {
      params.date_recommended = date_recommended;
    }
    if(due_month) {
      params.due_month = due_month;
    }
    if(asset_search_text) {
      params.asset_search_text = asset_search_text;
    }

    return params;
  }

- if @inspection
  :javascript

    function link_formatter(value, row) {
      action_html = ''
      if ((row['state'] != 'completed') && ('#{(can? :update, @inspection.inspection) && @inspection.updatable?}' == 'true')) {
        action_html = '<a class="button btn-xs" data-remote="true" href="/maintenance_service_orders/' + row['object_key'] + '/edit"><i class="fa fa-edit fa-1-5x text-success"></i></a><a data-confirm="Are you sure? The action cannot be undone." rel="nofollow" data-method="delete" href="/maintenance_service_orders/' + row['object_key'] + '"><i class="fa fa-trash-o fa-fw text-danger"></i></a><a href="/maintenance_service_orders/' + row['object_key'] + '/fire_workflow_event?event=mark_complete">Complete</a>';
      }
      return action_html;
    }
- elsif @asset
  :javascript

    function link_formatter(value, row) {
      action_html = ''
      if ((row['state'] != 'completed') && ('#{(can? :update, @asset) && !@asset.assigned_version}' == 'true')) {
        action_html = '<a class="button btn-xs" data-remote="true" href="/maintenance_service_orders/' + row['object_key'] + '/edit"><i class="fa fa-edit fa-1-5x text-success"></i></a><a data-confirm="Are you sure? The action cannot be undone." rel="nofollow" data-method="delete" href="/maintenance_service_orders/' + row['object_key'] + '"><i class="fa fa-trash-o fa-fw text-danger"></i></a><a href="/maintenance_service_orders/' + row['object_key'] + '/fire_workflow_event?event=mark_complete">Complete</a>';
      }
      return action_html;
    }