:ruby
  inspectors = User.active.with_role(:inspector).map{|l| {
    name: l.to_s, 
    id: l.id, 
    organization_id: l.organization_id
  }}

:css
  .inspector-assignment-label {
    display: block;
  }

  .inspector-checkboxes {
    padding-left: 0px;
    vertical-align: inherit;
  }

= simple_form_for(:transam_workflow_model_proxy,
  :html => {:class => 'form-vertical', :id => 'ready_assignments_form'},
  :url => fire_workflow_events_transam_workflow_index_path,
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
  :radio_buttons => :vertical_radio_and_checkboxes,
  :file => :vertical_file_input,
  :boolean => :vertical_boolean}) do |f|

  = f.input :global_ids, as: :hidden
  = f.input :event_name, as: :hidden, input_html: {value: 'assign'}
  = f.input :include_updates, as: :hidden, input_html: {value: '1'} # field updates

  .row
    .col-sm-6
      = f.input :inspector_ids, collection: User.none, as: :check_boxes, label: 'Inspectors', item_wrapper_class: 'checkbox-inline inspector-checkboxes', label_html: { class: 'inspector-assignment-label'} 

  = f.button :submit, 'Assign', :class => "btn btn-primary", :id => 'submit_inspector_assignment', disabled: true

:javascript

  function enable_disable_inspector_assignment_submit() {
    if($('input[name="transam_workflow_model_proxy[inspector_ids][]"]:checked').length > 0 && $('#inspection-table').bootstrapTable('getSelections').length > 0) {
      $('#submit_inspector_assignment').removeAttr('disabled');
    } else {
      $('#submit_inspector_assignment').attr('disabled', 'disabled');
    }
  }

  function new_inspector_checkbox(inspector) {
    return '<span class="checkbox checkbox-inline inspector-checkboxes"><label for="transam_workflow_model_proxy_inspector_ids_' + inspector.id +  '"><input class="check_boxes required" type="checkbox" value="' + inspector.id + '" name="transam_workflow_model_proxy[inspector_ids][]" id="transam_workflow_model_proxy_inspector_ids_' + inspector.id + '" aria-required="true">' + inspector.name + '</label></span>';
  }

  function update_inspection_inspectors_for_assignment(team_id) {
    if(team_id) {
      team_id = parseInt(team_id);
    }
    $('.inspector-checkboxes').remove();
    $('input[name="transam_workflow_model_proxy[inspector_ids][]"]').val('');

    var inspectors = #{inspectors.to_json.html_safe || {}};
    inspectors.filter(function(l){return l.organization_id == team_id;}).forEach(function(l) {
      $('.transam_workflow_model_proxy_inspector_ids').append(new_inspector_checkbox(l));
    });
  }

  $('#ready_assignments_form').validate({
    submitHandler: function(form){
      $('#ready_assignments_form #transam_workflow_model_proxy_global_ids').val(Array.from(selected_rows));
      form.submit();
    }
  });

  $('#ready_assignments_form').on('change', 'input[name="transam_workflow_model_proxy[inspector_ids][]"]', function() {
    enable_disable_inspector_assignment_submit();
  });
