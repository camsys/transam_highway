:ruby
    skip_legend = skip_legend || false
    roadways ||= highway_structure.roadways

    roadways_on = roadways.select{|r| r.on_under_indicator == '1'}
    roadways_under = roadways.select{|r| r.on_under_indicator != '1'}.sort_by(&:on_under_indicator)

:css
    #roadways-table td, #roadways-table th {
        text-align: left !important;
    }

    #roadways-table thead tr th:first-child,
    #roadways-table tbody tr th:first-child,
    #roadways-table tbody tr td:first-child {
      width: 20em;
      min-width: 10em;
      max-width: 30em;
      word-break: break-all;
    }

- unless skip_legend
    %legend
        Roadway

.table-responsive
    %table.table#roadways-table
        %thead
            %tr
                %th.center Roadway Fields
                - roadways_on.each do |r|
                    %th.center
                        = "On Structure - #{r.on_under_indicator}"
                        - if can?(:manage, Roadway) && ((@inspection.present? && can?(:update, @inspection.inspection) && @inspection.updatable?) || (@inspection.nil? && can?(:update, @asset) && !@asset.assigned_version))
                            = link_to edit_roadway_path(r.object_key), :remote => true, :class => "button btn-xs", :title => "Edit roadway" do
                                %i.fa.fa-edit.fa-fw.text-success
                            = link_to roadway_path(r.object_key), :remote => true, :method => :delete, :data => {:confirm => "Are you sure? The action cannot be undone.", :dismiss => "modal"}  do
                                %i.fa.fa-trash-o.fa-fw.text-danger
                - roadways_under.each do |r|
                    %th.center
                        = "Under Structure - #{r.on_under_indicator}"
                        - if can?(:manage, Roadway) && r.roadbeds.count == 0 && ((@inspection.present? && can?(:update, @inspection.inspection) && @inspection.updatable?) || (@inspection.nil? && can?(:update, @asset) && !@asset.assigned_version))
                            = link_to edit_roadway_path(r.object_key), :remote => true, :class => "button btn-xs", :title => "Edit roadway" do
                                %i.fa.fa-edit.text-success
                            = link_to roadway_path(r.object_key), :remote => true, :method => :delete, :data => {:confirm => "Are you sure? The action cannot be undone.", :dismiss => "modal"}  do
                                %i.fa.fa-trash-o.fa-fw.text-danger
                %th.center
                    - if can?(:manage, Roadway) && ((@inspection.present? && can?(:update, @inspection.inspection) && @inspection.updatable?) || (@inspection.nil? && can?(:update, @asset) && !@asset.assigned_version))
                        = link_to new_roadway_path(asset: @asset.object_key), :remote => true, :class => "button btn-xs", :title => "Add roadway"    do
                            %i.fa.fa-plus.fa-fw.text-info


        %tbody
            %tr.field-name
                %th.center= reference_label('roadways', 'on_under_indicator', 'On Under')
                %th.center= reference_label('roadways', 'route_signing_prefix_id', 'Road Prefix')
                %th.center= reference_label('roadways', 'level_of_service_type_id', 'Level of Service')
                %th.center= reference_label('roadways', 'route_number', 'Highway Segment')
                %th.center= reference_label('highway_structures', 'features_intersected', 'Features Intersected')
                - unless @sshml
                    %th.center= reference_label('highway_structures', 'facility_carried', 'Facility Carried')
                %th.center= reference_label('roadways', 'min_vertical_clearance', 'Minimum Vertical Clearance')
                %th.center= reference_label('highway_structures', 'milepoint', 'Milepoint')
                %th.center= reference_label('roadways', 'on_base_network', 'Base Highway Network')
                %th.center= reference_label('roadways', 'lrs_route', 'LRS Inventory Route')
                %th.center= reference_label('roadways', 'lrs_subroute', 'Subroute Number')
                %th.center= reference_label('roadways', 'functional_class_id', 'Functional Classification')
                %th.center= reference_label('roadways', 'lanes', 'Lanes')
                %th.center= reference_label('roadways', 'average_daily_traffic', 'Average Daily Traffic')
                %th.center= reference_label('roadways', 'average_daily_traffic_year', 'Year of Average Daily Traffic')
                %th.center= reference_label('roadways', 'total_horizontal_clearance', 'Total Horizontal Clearance')
                %th.center= reference_label('roadways', 'strahnet_designation_type_id', 'Strategic Highway Network')
                %th.center= reference_label('roadways', 'traffic_direction_type_id', 'Direction of Traffic')
                %th.center= reference_label('roadways', 'on_national_highway_system', 'NHS')
                %th.center= reference_label('roadways', 'average_daily_truck_traffic_percent', 'Truck ADT')
                %th.center= reference_label('roadways', 'on_truck_network', 'Designated National Network')
                %th.center= reference_label('roadways', 'future_average_daily_traffic', 'Future Average Daily Traffic')
                %th.center= reference_label('roadways', 'future_average_daily_traffic_year', 'Year of Future Average Daily Traffic')
            = render partial: 'highway_structures/bridge_like/roadways_table', locals: {roadways: roadways_on}
            = render partial: 'highway_structures/bridge_like/roadways_table', locals: {roadways: roadways_under}

:javascript
    $(function() {
        function transpose_table_body() {
            var t = $('#roadways-table tbody').eq(0);
            var r = t.find('tr');
            var cols= r.length;
            var rows= r.eq(0).find('td, th').length;
            var cell, next, tem, i = 0;
            var tb= $('<tbody></tbody>');

            while(i<rows){
                cell= 0;
                tem= $('<tr></tr>');
                while(cell<cols){
                    next= r.eq(cell++).find('td, th').eq(0);
                    tem.append(next);
                }
                tb.append(tem);
                ++i;
            }
            $('#roadways-table').append(tb);
            t.remove();
            $('#roadways-table').show();
        }

        transpose_table_body();
    });