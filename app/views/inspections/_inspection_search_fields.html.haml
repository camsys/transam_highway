:css
  hr {
    margin-top: -10px;
    margin-bottom: 0;
  }

:ruby
  inspectors = []
  Organization.all.each do |x|
    inspectors += x.users.with_role(:inspector).map{|u| [u.name, u.id, x.id]}
  end

  inspector_ids_by_team = {}
  inspectors.each do |i|
    inspector_ids_by_team[i[2]] = [] unless inspector_ids_by_team[i[2]]
    inspector_ids_by_team[i[2]] << i[1]
  end

  inspectors = inspectors.map{|x| x[0..1]}.uniq + [['None', -1]]

  highway_team_org_type_id = OrganizationType.find_by(class_name: 'HighwayTeam').id
  assignable_teams = []
  Organization.active.each do |l|
    if l.organization_type_id == highway_team_org_type_id || HighwayTeam.where(parent_id: l.id).count == 0
      assignable_teams << l
    end
  end

.col-sm-3
  = f.input :asset_tag, label: reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key'), :input_html => { :data => {:convert => 'uppercase'} }
  = f.input :inspection_program_id, collection: InspectionProgram.active.pluck(:name, :id), label: reference_label('highway_structures', 'inspection_program_id', 'Inspection Program'), include_blank: 'Select All'
  .row
    %label.control-label.col-sm-12
      = reference_label('inspections', 'calculated_inspection_due_date', 'Due Date')
    .col-sm-5
      = f.input :min_calculated_inspection_due_date, :label => false, :wrapper => :vertical_append do
        = f.input_field :min_calculated_inspection_due_date, :class => "form-control datepicker-clear", :as => :string, :data => {'date-container' => '.inspection_proxy_min_calculated_inspection_due_date'}, :value => f.object.min_calculated_inspection_due_date
        %span.input-group-addon
          %i.fa.fa-calendar
    .col-sm-2.text-center
      = "---"
    .col-sm-5
      = f.input :max_calculated_inspection_due_date, :label => false, :wrapper => :vertical_append do
        = f.input_field :max_calculated_inspection_due_date, :class => "form-control datepicker-clear", :as => :string, :data => {'date-container' => '.inspection_proxy_max_calculated_inspection_due_date'}, :value => f.object.max_calculated_inspection_due_date
        %span.input-group-addon
          %i.fa.fa-calendar
  = f.input :inspection_fiscal_year, collection: %w(EVN ODD LP0 LP1 LP2 LP3 12M), label: reference_label('highway_structures', 'inspection_fiscal_year', 'Fiscal Year'), include_blank: 'Select All'
  = f.input :inspection_month, collection: %w(JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC), label: reference_label('highway_structures', 'inspection_month', 'Inspection Month'), include_blank: 'Select All'
  = f.input :inspection_quarter, collection: %w(A B C D E F G H), label: reference_label('highway_structures', 'inspection_quarter', 'Inspection Quarter'), include_blank: 'Select All'
  = f.input :inspection_trip_key, collection: (1..99).to_a, label: reference_label('highway_structures', 'inspection_trip_key', 'Inspection Trip'), include_blank: 'Select All'
  = f.input :inspection_zone_id, collection: InspectionZone.active, label: reference_label('highway_structures', 'inspection_zone', 'Inspection Zone'), include_blank: 'Select All'
  
.col-sm-3
  - orgs = (can?(:view_all, Inspection) ? current_user.viewable_organizations : current_user.organizations)
  = f.input :organization_type_id, collection: OrganizationType.where(class_name: ['HighwayAuthority', 'HighwayConsultant'], id: orgs.pluck(:organization_type_id)).map{|o| [o.name, o.id]} + [['None', -1]], label: reference_label('inspections', 'organization_type_id', 'Inspection Group'), include_blank: 'Select All'
  = f.input :assigned_organization_id, collection: (orgs & assignable_teams).map{|x| [x.name, x.id]} + [['None', -1]], label: reference_label('inspections', 'assigned_organization_id', 'Inspection Team'), include_blank: 'Select All'
  = f.input :inspector_id, collection: inspectors, label: reference_label('inspections', 'inspector_id', 'Inspector'), include_blank: 'Select All'

.col-sm-3
  %label.control-label
    = reference_label('inspections', 'state', 'Inspection Status')
  %span.checkbox
    %label
      = check_box_tag 'pre', 'all_pre', @search_proxy.state && ["open", "ready", "assigned"].all?{|s| @search_proxy.state.include?(s)}, class: 'all_state'
      %strong= 'Pre-Inspection'
  %hr
  = f.input :state, as: :check_boxes, input_html: {class: 'pre_state_selection state_select'}, collection: Inspection.new.machine.definition.states.map{|r| [r.human_name[0] == r.human_name[0].downcase ? r.human_name.titleize : r.human_name, r.value]}.select{|r| ["Open", "Ready", "Assigned"].include? r[0]}, label: false
  %span.checkbox
    %label
      = check_box_tag 'field', 'all_field', @search_proxy.state && ["in_field", "in_progress", "field_work_complete"].all?{|s| @search_proxy.state.include?(s)}, class: 'all_state'
      %strong= 'In Field'
  %hr
  = f.input :state, as: :check_boxes, input_html: {class: 'field_state_selection state_select'}, collection: Inspection.new.machine.definition.states.map{|r| [r.human_name[0] == r.human_name[0].downcase ? r.human_name.titleize : r.human_name, r.value]}.select{|r| ["In Field", "In Progress", "Field Work Complete"].include? r[0]}, label: false
  %span.checkbox
    %label
      = check_box_tag 'office', 'all_office', @search_proxy.state && ["draft_report", "qc_review", "submitted", "qa_review", "signature_ready"].all?{|s| @search_proxy.state.include?(s)}, class: 'all_state'
      %strong= 'In Office'
  %hr
  = f.input :state, as: :check_boxes, input_html: {class: 'office_state_selection state_select'}, collection: Inspection.new.machine.definition.states.map{|r| [r.human_name[0] == r.human_name[0].downcase ? r.human_name.titleize : r.human_name, r.value]}.select{|r| ["Draft Report", "QC Review", "Submitted", "QA Review", "Signature Ready"].include? r[0]}, label: false
  %span.checkbox
    %label
      = check_box_tag 'historical', 'all_historical', @search_proxy.state && ["final"].all?{|s| @search_proxy.state.include?(s)}, class: 'all_state'
      %strong= 'Historical'
  %hr
  = f.input :state, as: :check_boxes, input_html: {class: 'historical_state_selection state_select'}, collection: Inspection.new.machine.definition.states.map{|r| [r.human_name[0] == r.human_name[0].downcase ? r.human_name.titleize : r.human_name, r.value]}.select{|r| r[0] == "Final"}, label: false


.col-sm-3
  = f.input :inspection_type_id, as: :check_boxes, collection: InspectionType.active, label: reference_label('inspections', 'inspection_type_id', 'Inspection Type')


:javascript
  $(function() {
    $('#inspection_proxy_min_calculated_inspection_due_date').bootstrapDP({
      minViewMode: "months",
      autoclose: true,
      orientation: "bottom left"
    });

    $('#inspection_proxy_max_calculated_inspection_due_date').bootstrapDP({
      minViewMode: "months",
      autoclose: true
    });

    $('#inspection_proxy_max_calculated_inspection_due_date').datepicker().on("changeMonth", function(e) {
      // change to end of month date
      var currentDate = e.date;
      console.log(currentDate);
      var endMonthDate = moment(currentDate).endOf("month").toDate();
      var _self = this;
      setTimeout(function() {
        $(_self).datepicker('update', endMonthDate);
      }, 50);
    });



    $('#inspection_proxy_organization_type_id').change(function() {
      var group_id = $(this).val();
      update_inspection_teams_by_group(group_id, 'inspection_proxy_assigned_organization_id');
      if(group_id) {
        $('#inspection_proxy_assigned_organization_id').val('');
      }
    });

    $('#inspection_proxy_assigned_organization_id').change(function() {
      var team_id = $(this).val();
      update_inspectors_by_team(team_id);
      if(team_id) {
        $('#inspection_proxy_inspector_id').val('');
      }
    });

    function update_inspectors_by_team(team_id) {
      group_id = parseInt(team_id);
      if(group_id > 0) {
        var inspector_ids_by_team = #{inspector_ids_by_team.to_json.html_safe || {}};
        var inspector_ids = inspector_ids_by_team[group_id];
        $('#inspection_proxy_inspector_id option').hide();
        inspector_ids.forEach(function(inspector_id) {
          $('#inspection_proxy_inspector_id option[value=' + inspector_id + ']').show();
        });

        $('#inspection_proxy_inspector_id option[value=""]').show();
      } else {
        $('#inspection_proxy_inspector_id option').show();
      }
    }

    update_inspection_teams_by_group("#{@search_proxy.organization_type_id}", 'inspection_proxy_assigned_organization_id');
    update_inspectors_by_team("#{@search_proxy.assigned_organization_id}");

    $('.all_state').on("click", function(event) {
      var state_type = this.id;
      var section_class = '.'.concat(state_type, '_state_selection')
      var boxes = $(section_class);
      if($(this).prop("checked")){
        boxes.prop("checked", true);
      } else {
        boxes.prop("checked", false);
      }
    });

    $('.state_select').on('click', function(){
      var section_class = $(this).attr("class").split(" ").find(function(c){return c.includes("state_selection");});

      var AllCategoryChecked = function(){
        return $(".".concat(section_class)).toArray().every(function(box){
          return $(box).prop("checked");
        });
      };

      if(AllCategoryChecked()) {
        $("#".concat(section_class.split("_")[0])).prop("checked", true);
      } else {
        $("#".concat(section_class.split("_")[0])).prop("checked", false);
      }
    });

    $('.state_select').parent().css("margin-left", "20px");
  });
};