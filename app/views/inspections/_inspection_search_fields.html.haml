:ruby
  inspectors = User.where(id: Inspection.joins(:inspectors).pluck("users.id").uniq).map{|r| [r.name, r.id]} + [['None', -1]]

  inspection_team_ids_by_group = {}
  Organization.active.pluck(:id,:organization_type_id).each{|r| 
    inspection_team_ids_by_group[r[1]] = [] unless inspection_team_ids_by_group[r[1]]
    inspection_team_ids_by_group[r[1]] << r[0]
    }

  @search_proxy.state = Inspection.state_names - ['final'] unless @search_proxy.state

.col-sm-3
  = f.input :asset_tag, label: reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key'), :input_html => { :data => {:convert => 'uppercase'} }
  = f.input :inspection_program_id, collection: InspectionProgram.active.pluck(:name, :id), label: reference_label('highway_structures', 'inspection_program_id', 'Inspection Program'), include_blank: 'Select All'
  .row
    %label.control-label.col-sm-12
      = reference_label('inspections', 'calculated_inspection_due_date', 'Due Date')
    .col-sm-5
      = f.input :min_calculated_inspection_due_date, :label => false, :wrapper => :vertical_append do
        = f.input_field :min_calculated_inspection_due_date, :class => "form-control datepicker-clear", :as => :string, :data => {'date-container' => '.inspection_proxy_min_calculated_inspection_due_date'}, :value => f.object.min_calculated_inspection_due_date
        %span.input-group-addon
          %i.fa.fa-calendar
    .col-sm-2.text-center
      = "---"
    .col-sm-5
      = f.input :max_calculated_inspection_due_date, :label => false, :wrapper => :vertical_append do
        = f.input_field :max_calculated_inspection_due_date, :class => "form-control datepicker-clear", :as => :string, :data => {'date-container' => '.inspection_proxy_max_calculated_inspection_due_date'}, :value => f.object.max_calculated_inspection_due_date
        %span.input-group-addon
          %i.fa.fa-calendar
  = f.input :inspection_fiscal_year, collection: %w(EVN ODD LP0 LP1 LP2 LP3 12M), label: reference_label('highway_structures', 'inspection_fiscal_year', 'Fiscal Year'), include_blank: 'Select All'
  = f.input :inspection_month, collection: %w(JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC), label: reference_label('highway_structures', 'inspection_month', 'Inspection Month'), include_blank: 'Select All'
  = f.input :inspection_quarter, collection: %w(A B C D E F G H), label: reference_label('highway_structures', 'inspection_quarter', 'Inspection Quarter'), include_blank: 'Select All'
  = f.input :inspection_trip_key, collection: (1..99).to_a, label: reference_label('highway_structures', 'inspection_trip_key', 'Inspection Trip'), include_blank: 'Select All'

.col-sm-3
  = f.input :organization_type_id, collection: OrganizationType.active.pluck(:name, :id) + [['None', -1]], label: reference_label('inspections', 'organization_type_id', 'Inspection Group'), include_blank: 'Select All'
  = f.input :assigned_organization_id, collection: Organization.active.pluck(:name, :id) + [['None', -1]], label: reference_label('inspections', 'assigned_organization_id', 'Inspection Team'), include_blank: 'Select All'
  = f.input :inspector_id, collection: inspectors, label: reference_label('inspections', 'inspector_id', 'Inspector'), include_blank: 'Select All'

.col-sm-3
  = f.input :state, as: :check_boxes, collection: Inspection.new.machine.definition.states.map{|r| [r.human_name[0] == r.human_name[0].downcase ? r.human_name.titleize : r.human_name, r.value]}, label: reference_label('inspections', 'state', 'Inspection Status')


:javascript
  $(function() {
    $('.datepicker-clear').bootstrapDP({
      minViewMode: "months",
      autoclose: true
    });

    $('#inspection_proxy_max_calculated_inspection_due_date, #inspection_proxy_max_inspection_date').datepicker().on("changeMonth", function(e) {
      // change to end of month date
      var currentDate = e.date;
      console.log(currentDate);
      var endMonthDate = moment(currentDate).endOf("month").toDate();
      var _self = this;
      setTimeout(function() {
        $(_self).datepicker('update', endMonthDate);
      }, 50);
    });

    function show_hide_inspection_team_options(group_id) {
      if(group_id) {
        var inspection_team_ids_by_group = #{inspection_team_ids_by_group.to_json.html_safe || {}};
        group_id = parseInt(group_id);
        var team_ids = inspection_team_ids_by_group[group_id];
        $('#inspection_proxy_assigned_organization_id option').hide();
        team_ids.forEach(function(team_id) {
          $('#inspection_proxy_assigned_organization_id option[value=' + team_id + ']').show();
        });

        $('#inspection_proxy_assigned_organization_id option[value=""]').show();
      } else {
        $('#inspection_proxy_assigned_organization_id option').show();
      }
    }
    show_hide_inspection_team_options("#{@search_proxy.organization_type_id}");

    $('#inspection_proxy_organization_type_id').change(function() {
      var group_id = $(this).val();
      show_hide_inspection_team_options(group_id);
      if(group_id) {
        $('#inspection_proxy_assigned_organization_id').val('');
      }
    });
  });