:css
  .popover-title{
      background: #fbf381;
  }
  .popover-action:hover {
    cursor: pointer;
    cursor: hand;
  }

#inspection_table_actions.btn-toolbar
  %span.col-sm-12
    %b#selected_inspection_count
.table-responsive
  %table.table.table-condensed.table-hover{:id => "inspection-table",
    :data => {:toggle => 'table',
    :card_view => "false",
    :pagination => 'true',
    :url => inspections_path(:format => :json),
    :side_pagination => 'server',
    :show_pagination_switch => 'false',
    :page_number => '1',
    :page_list => "[5, 10, 20, 50, 100, 500, 1000]",
    :page_size => current_user.num_table_rows,
    :sortable => 'true',
    :sort_order => 'asc',
    :cookie => 'true',
    :cookie_id_table => "inspections_table_id",
    :cookie_expire => "1d",
    :search => 'false',
    :toolbar => "#inspection_table_actions",
    :show_columns => 'true',
    :show_export => 'true',
    :export_types => "['csv', 'txt', 'excel']",
    :id_field => 'object_key',
    :resizable => 'true',
    :maintain_selected => 'true',
    :single_select => 'false'}}
    %thead
      %tr
        %th.center{:data => {:field => 'dummy1', :formatter => 'inspection_link_formatter'}}
        %th.center{:data => {:field => 'checked', :checkbox => 'true'}} Selected
        %th.center{:data => {:field => 'to_global_id', :visible => 'false'}} Global ID
        %th.center{:data => {:field => 'highway_structurible_type', :sortable => 'true'}}= reference_label('highway_structures', 'highway_structurible_type', 'Structure Class')
        %th.center{:data => {:field => 'organization_type', :sortable => 'true'}}= reference_label('inspections', 'organization_type_id', 'Inspection Group')
        %th.center{:data => {:field => 'assigned_organization', :sortable => 'true'}}= reference_label('inspections', 'assigned_organization_id', 'Inspection Team')
        %th.center{:data => {:field => 'inspectors', :sortable => 'false'}}= reference_label('inspections', 'inspectors', 'Inspectors')
        %th.center{:data => {:field => 'transam_assets_asset_tag', :sortable => 'true', :formatter => 'structure_link_formatter'}}= reference_label('highway_structures', 'transam_assets.asset_tag', 'Structure Key')
        %th.center.hidden{:data => {:field => 'object_key', :sortable => 'true'}} Inspection Key
        %th.center{:data => {:field => 'inspection_category', :sortable => 'false'}}= reference_label('highway_structures', 'inspection_category_id', 'Inspection Category')
        %th.center{:data => {:field => 'inspection_type', :sortable => 'true'}}= reference_label('inspections', 'inspection_category_type_id', 'Inspection Type')
        %th.center{:data => {:field => 'calculated_inspection_due_date', :sortable => 'true', :formatter => "month_year_formatter"}}= reference_label('inspections', 'calculated_inspection_due_date', 'Due Date')
        %th.center{:data => {:field => 'event_datetime', :sortable => 'true', :formatter => "date_formatter"}}= reference_label('inspections', 'event_datetime', 'Routine Inspection Date')
        %th.center{:data => {:field => 'state', :sortable => 'true'}}= reference_label('inspections', 'state', 'Inspection Status')
        %th.center{:data => {:field => 'location_description', :sortable => 'true'}}= reference_label('highway_structures', 'location_description', 'Location Description')
        %th.center{:data => {:field => 'owner', :sortable => 'true'}}= reference_label('highway_structures', 'owner_id', 'Owner')
        %th.center{:data => {:field => 'calculated_condition', :sortable => 'false'}}= reference_label('highway_structures', 'calculated_condition', 'Condition')
        %th.center{:data => {:field => 'inspection_program', :sortable => 'true'}}= reference_label('highway_structures', 'inspection_program_id', 'Inspection Program')
        %th.center{:data => {:field => 'inspection_trip', :sortable => 'true'}}= reference_label('highway_structures', 'inspection_trip', 'Inspection Trip')
        /%th.center{:data => {:field => 'inspection_zone', :sortable => 'true'}}= reference_label('inspections', 'inspection_zone', 'Inspection Zone')
        %th.center{:data => {:field => 'routine_report_submitted_at', :sortable => 'true', :formatter => "date_formatter"}}= reference_label('inspections', 'routine_report_submitted_at', 'Routine Inspection Submitted')

= render 'shared/table_formatters'

:javascript 
  var selected_rows = new Set();

  // stub correct sorting field name
  var inspection_search_sorting_mappings = {
    transam_assets_asset_tag: "transam_assets.asset_tag",
    highway_structurible_type: "asset_types.class_name",
    location_description: "highway_structures.location_description",
    owner: "owners.code",
    //calculated_condition: "inspections.calculated_condition",
    assigned_organization: "assigned_organizations.name",
    organization_type: "organization_types.name",
    inspection_program: "inspection_programs.name",
    inspection_type: "inspection_types.name",
    inspection_trip: "highway_structures.inspection_trip"
  };

  $('#inspection-table').bootstrapTable({
    onLoadError: function(status, res) {
      alert('An error occurred loading your search results. Please refresh the page and try your search again.');
    },
    queryParams: function(params) {
      params.sort = params.sort || params.sortName;
      params.order = params.order || params.sortOrder;
      var sort_field = params.sort;
      var map_field = inspection_search_sorting_mappings[sort_field];
      if(map_field) {
        params.sort = map_field;
      }

      return params;
    }
  });

  function month_year_formatter(value) {
    if (value) {
      return moment(value).format('MMM YYYY');
    } else {
      return value;
    }
  }

  // more table formatters
  function structure_link_formatter(value, row) {
    if (value == null) {
      return "-";
    } else {
      return '<a target="_blank" href="/inventory/' + row['structure_object_key'] + '">' + value + '</a>';
    }
  }

  function inspection_link_formatter(value, row) {
    return '<a href="/inspections/' + row['object_key'] + '">View</a>';
  }

  $(document).ready(function() {
    // Initialize popovers
    $('[data-toggle="popover"]').popover();

    // Enables or disables the package actions depending on how many are selected
    function enable_disable_table_actions() {
      enable_disable_group_team_assignment_submit();
      enable_disable_inspector_assignment_submit();
    }

    // Updates the selected rows in the table
    function add_rows(rows) {
      for (i = 0; i < rows.length; i++) {
        var insp_key = rows[i].to_global_id;
        if(!selected_rows.has(insp_key)) {
          selected_rows.add(insp_key);
        }
      }

      update_selection_count_text();
      enable_disable_table_actions();
    }

    function remove_rows(rows) {
      for (i = 0; i < rows.length; i++) {
        var insp_key = rows[i].to_global_id;
        if(selected_rows.has(insp_key)) {
          selected_rows.delete(insp_key);
        }
      }

      update_selection_count_text();
      enable_disable_table_actions();
    }

    function update_selection_count_text() {
      $('#selected_inspection_count').text(selected_rows.size + " inspection records selected.");
    }

    function check_row_selected() {
      $("#inspection-table").bootstrapTable("checkBy", {field:"to_global_id", values: Array.from(selected_rows)})
    }

    $('#inspection-table').on('check.bs.table', function(row, elem) {
      add_rows([elem]);
    }).on('uncheck.bs.table', function(row, elem) {
      remove_rows([elem]);
    }).on('check-all.bs.table', function(rows, elements) {
      add_rows(elements);
    }).on('uncheck-all.bs.table', function(rows, elements) {
      remove_rows(elements);
    }).on('page-change.bs.table', function(page_number, page_size) {
      check_row_selected();
    }).on('load-success.bs.table', function(data) {
      check_row_selected();
    }).on('all.bs.table', function(e, row) {
      $('[data-toggle="popover"]').popover();
    });

  });
  $(window).resize(function() {
    $('#inspection-table').bootstrapTable('resetView');
  });
