:ruby
  table_dom_id = SecureRandom.hex

:css
  #streambed_table tbody > tr:nth-of-type(3n-2) {
    background-color: #f5f5f5;
  }

.row
  .col-sm-12
    .panel.panel-default
      .panel-heading
        %h3.panel-title
          %a{data: {toggle: 'collapse'}, href: '#collapse-streambed'}Streambed Profile
          - if can?(:update, @inspection.inspection) && @inspection.updatable?
            .btn-group.pull-right.panel-action
              %div
                %button.btn.btn-primary.edit-streambed-profiles-button
                  Edit
              .save-streambed-profiles-buttons{style: 'display: none;'}
                %button.btn.btn-primary.save-streambed-profiles-button
                  Save
                %button.btn.btn-primary.cancel-streambed-profiles-button
                  Cancel
      #collapse-streambed.panel-collapse.collapse.in
        .panel-body
          .row
            .col-md-12
              #streambed_table_actions.btn-toolbar
                - if @inspection.streambed_profile && can?(:update, @inspection.inspection) && @inspection.updatable?
                  .btn-group
                    = link_to new_streambed_profile_streambed_profile_point_path(@inspection.streambed_profile), remote: true, class: 'btn btn-primary', title: 'New Distance' do
                      %i.fa.fa-plus
                      = " New Distance"
              .table-responsive#streambed_table
                -# Remove .table-hover with data-classes
                %table{:id => table_dom_id,
                        :data => {:toggle => 'table',
                        :card_view => "false",
                        :classes => 'table',
                        :pagination => 'false',
                        :sort_order => 'asc',
                        :sortable => 'false',
                        :search => 'false',
                        :show_columns => 'false',
                        :toolbar => "#streambed_table_actions",
                        :row_style => 'row_style',
                        :click_to_select => 'false',
                        :show_export => 'true',
                        :id_field => 'object_key',
                        :export_types => "['csv', 'txt', 'excel']",
                        :cookie => 'true',
                        :cookie_id_table => "streambed_profile_table_id",
                        :cookie_expire => "1y",
                        :maintain_selected => 'true',
                        :single_select => 'false'}}
                  %thead
                    = render partial: "inspections/streambed_profile_table_head"

                  %tbody
                    = render partial: "inspections/streambed_profile_table_body"


:javascript
  $(function() {
    $('.edit-streambed-profiles-button').on('click', function() {
      enable_streambed_profile_editing();
    });
    $('.save-streambed-profiles-button').on('click', function() {
      submit_streambed_profile_changes();
      disable_streambed_profile_editing();
    });
    $('.cancel-streambed-profiles-button').on('click', function() {
      disable_streambed_profile_editing();
    });
  });

  function enable_streambed_profile_editing() {
    $('.edit-streambed-profiles-button').hide();
    $('.save-streambed-profiles-buttons').show();
    $('#streambed_table .number-display').hide();
    $('#streambed_table .number-input').show();
    $('#streambed_table .text-display').hide();
    $('#streambed_table .text-input').show();
  }

  function disable_streambed_profile_editing() {
    $('.save-streambed-profiles-buttons').hide();
    $('.edit-streambed-profiles-button').show();
    $('#streambed_table .number-input').hide();
    $('#streambed_table .number-input').each(function() {
      $(this).val(parseFloat($(this).closest('td').find('span').html()));
    })
    $('#streambed_table .number-display').show();
    $('#streambed_table .text-input').hide();
    $('#streambed_table .text-input').each(function() {
      $(this).val($(this).closest('td').find('em').html());
    })
    $('#streambed_table .text-display').show();
  }

  function submit_streambed_profile_changes() {
    $("#spinner").show();

    var targets = {};
    $( "#streambed_table input:not(.water-level):not(.reference-line):not(.water-level-reference)" ).each(function( index ) {
      if (($(this).data('streambed-profile-point')) && ($(this).data('streambed-profile-point').length > 0)) {
        targets[$(this).data('streambed-profile-point')] = $(this).val();
      } else if (($(this).data('distance')) && ($(this).data('distance').length > 0)) {
        targets[$(this).data('distance')] = $(this).val();
      }
    });

    $.ajax({
      url: "#{streambed_profile_path(@inspection.streambed_profile || 'xxx')}",
      method: 'put',
      data: {
        targets: targets,
        streambed_profile: {
          water_level: $('input.water-level').val(),
          reference_line: $('input.reference-line').val(),
          water_level_reference: $('input.water-level-reference').val()
        }
      },
      success: function() {
        $("#spinner").hide();
      },
      failure: function() {
        $("#spinner").hide();
        alert('An error occurred saving the changes. Please try again.');
      }
    })
  }