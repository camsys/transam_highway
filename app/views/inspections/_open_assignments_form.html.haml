:ruby
  highway_team_org_type_id = OrganizationType.find_by(class_name: 'HighwayTeam').id

  inspection_teams = []
  Organization.active.each do |l|
    if l.organization_type_id == highway_team_org_type_id || HighwayTeam.where(parent_id: l.id).count == 0
      inspection_teams << {
                            name: l.coded_name,
                            id: l.id,
                            organization_type_id: l.organization_type_id == highway_team_org_type_id ? Organization.find_by(id: l.parent_id).organization_type_id : l.organization_type_id
                          }
    end
  end

  inspection_teams = inspection_teams.sort_by{|r| r[:name]}

= simple_form_for(:transam_workflow_model_proxy,
  :html => {:class => 'form-vertical', :id => 'open_assignments_form'},
  :url => fire_workflow_events_transam_workflow_index_path,
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
  :radio_buttons => :vertical_radio_and_checkboxes,
  :file => :vertical_file_input,
  :boolean => :vertical_boolean}) do |f|

  = f.input :global_ids, as: :hidden
  = f.input :event_name, as: :hidden, input_html: {value: 'make_ready'}
  = f.input :include_updates, as: :hidden, input_html: {value: '1'} # field updates

  .row
    .col-sm-6
      = f.input :organization_type_id, collection: OrganizationType.where(class_name: ['HighwayAuthority', 'HighwayConsultant']), label: 'Inspection Group', include_blank: false
    .col-sm-6
      = f.input :assigned_organization_id, label: 'Inspection Team' do
        = f.select :assigned_organization_id, [], {}, {class: 'form-control'}

  = f.button :submit, 'Assign', :class => "btn btn-primary", :id => 'submit_group_team_assignment', disabled: true

:javascript

  function enable_disable_group_team_assignment_submit() {
    if($('#transam_workflow_model_proxy_assigned_organization_id').val() && $('#inspection-table').bootstrapTable('getSelections').length > 0) {
      $('#submit_group_team_assignment').removeAttr('disabled');
    } else {
      $('#submit_group_team_assignment').attr('disabled', 'disabled');
    }
  }

  function update_inspection_teams_for_assignment(type_id) {
    if(type_id) {
      type_id = parseInt(type_id);
    }
    $('#transam_workflow_model_proxy_assigned_organization_id option').remove();

    var inspection_teams = #{inspection_teams.to_json.html_safe || {}};
    inspection_teams.filter(function(l){return l.organization_type_id == type_id;}).forEach(function(l) {
      $('#transam_workflow_model_proxy_assigned_organization_id').append("<option data-organization-type-id='" + type_id + "' value='" + l.id + "'>" + l.name + "</>");
    });
  }

  $('#open_assignments_form').validate({
    submitHandler: function(form){
      $('#open_assignments_form #transam_workflow_model_proxy_global_ids').val(Array.from(selected_rows));
      form.submit();
    }
  });

  $('#transam_workflow_model_proxy_organization_type_id').change(function() {
    var type_id = $(this).val();
    $('#transam_workflow_model_proxy_assigned_organization_id').val();
    $('#transam_workflow_model_proxy_assigned_organization_id option').each(function() {
      if (parseInt($(this).data('organization-type-id')) == parseInt(type_id)) {
        $(this).show();
      } else {
        $(this).hide();
      }
    });

    enable_disable_group_team_assignment_submit();
    update_inspection_teams_for_assignment(type_id);
    update_inspection_inspectors_for_assignment($('#transam_workflow_model_proxy_assigned_organization_id').val());
  });

  $('#transam_workflow_model_proxy_assigned_organization_id').change(function() {
    var type_id = $('#transam_workflow_model_proxy_organization_type_id').val();
    var team_id = $(this).val();
    update_inspection_inspectors_for_assignment(team_id);
  });

